
text = "This is my test text. We are keeping this text short to keep things manageable."

def count_words(text):
    """Count the number of times each word occures in text(str). Return dictionary
    where keys are unique words and values  are word counts. Skip punctuation"""
    text = text.lower()
    skips = [",", ".", ";", ":", "'", '"']
    for ch in skips:
        text = text.replace(ch, "")
    word_counts = {}
    
    for word in text.split(" "):
        #known word
        if word in word_counts:
            word_counts[word] += 1
        #unknown word
        else: 
            word_counts[word] = 1
    return word_counts

#New choice

from collections import Counter

def count_words_fast(text):
    """Count the number of times each word occures in text(str). Return dictionary
    where keys are unique words and values  are word counts. Skip punctuation"""
    text = text.lower()
    skips = [",", ".", ";", ":", "'", '"']
    for ch in skips:
        text = text.replace(ch, " ")
    word_counts = Counter(text.split(" "))
    return word_counts

#Reading in a book
def read_book(title_path):
    """
    Read a book and return it as a string.
    """
    with open(title_path, "r", encoding="utf8") as current_file:
        text = current_file.read()
        text = text.replace("\n","").replace("\r","")
    return text

text = read_book("./Books/English/shakespeare/Romeo and Juliet.txt")

#Find famous sentence
ind = text.find("What's in a name?")
sample_text = text[ind: ind+1000]
sample_text
        
#Computing word frequency statistic
def word_stats(word_counts):
    """
    Return number of unique words and word frequencies.
    """
    num_unique = len(word_counts)
    counts = word_counts.values()
    return (num_unique, counts)

text = read_book("./Books/English/shakespeare/Romeo and Juliet.txt")
word_counts = count_words(text)
(num_unique, counts) = word_stats(word_counts)

num_unique
#R: 5118
sum(counts)
#R: 40776


#Compare English and German translation
text = read_book("./Books/English/shakespeare/Romeo and Juliet.txt")
word_counts = count_words(text)
(num_unique, counts) = word_stats(word_counts)
print(num_unique, sum(counts))
#R: 5118 40776

text = read_book("./Books/German/shakespeare/Romeo und Julia.txt")
word_counts = count_words(text)
(num_unique, counts) = word_stats(word_counts)
print(num_unique, sum(counts))
#R: 7527 20311


#Reading multiple files
import os
book_dir = "./Books"
os.listdir(book_dir)
#R: ['English','French','German','Portuguese']
for language in os.listdir(book_dir):
    for author in os.listdir(book_dir + "/" + language):
        for title in os.listdir(book_dir + "/" + language + "/" + author):
            inputfile = book_dir + "/" + language + "/" + author + "/" +title
            print(inputfile)
            text = read_book(inputfile)
            (num_unique, counts) = word_stats(count_words(text))
#R: list all the books

#Another way for using pandas
import pandas as pd
table = pd.DataFrame(columns = ("name","age"))
#Row 1 of the table
table.loc[1] = "James", 22
table.loc[2] = "Jass", 32
table
#R:     name   age
#R: 1  James  22.0
#R: 2   Jass  32.0
table.columns
#R: Index(['name', 'age'], dtype='object')

import pandas as pd
stats = pd.DataFrame(columns = ("language","author","title","length","unique"))
title_num = 1
for language in os.listdir(book_dir):
    for author in os.listdir(book_dir + "/" + language):
        for title in os.listdir(book_dir + "/" + language + "/" + author):
            inputfile = book_dir + "/" + language + "/" + author + "/" +title
            print(inputfile)
            text = read_book(inputfile)
            (num_unique, counts) = word_stats(count_words(text))
            statis.loc[title_num] = language,author.capitalize(),title.replace(".txt",""),sum(counts),num_unique
            title_num += 1
#R: run and find all books
stats
#R: 120 rows * 5 columns
stats.head()
stats.tail()
#R: give the head and the end 5 lines

#R: access to particluar column in table
stats.length
#R: the length of each book
stats.unique

import matplotlib.pyplot as plt
plt.plot(stats.length, stats.unique, "bo")
#R: log
plt.loglog(stats.length, stats.unique, "bo")
#R: straight line

stats[stats.language == "English"]
plt.figure(figsize = (10, 10))
subset = stats[stats.language == "English"]
plt.plot(subset.length, subset.unique, "o", label = "English", color = "crimson")

subset = stats[stats.language == "French"]
plt.plot(subset.length, subset.unique, "o", label = "French", color = "forestgreen")

subset = stats[stats.language == "German"]
plt.plot(subset.length, subset.unique, "o", label = "German", color = "orange")

subset = stats[stats.language == "Portuguese"]
plt.plot(subset.length, subset.unique, "o", label = "Portuguese", color = "blueviolet")
plt.legend()
plt.xlabel("Book length")
plt.ylabel("Number of unique words")
plt.savefig("lang_plot.pdf")

#In this case study, we will find and plot the distribution of word frequencies 
#for each translation of Hamlet. Perhaps the distribution of word frequencies 
#of Hamlet depends on the translation
def word_count_distribution(text):
    word_counts = count_words_fast(text)
    count_distribution =Counter(word_counts.values())
    return count_distribution
    
distribution = word_count_distribution(text)

import numpy as np
def more_frequent(distribution):
    frequency_key = list(distribution.keys())
    frequency_of_counts = list(distribution.values())
    cumulative_frequencies = np.cumsum(frequency_of_counts)
    more_frequence = 1- cumulative_frequencies/cumulative_frequencies[-1]
    return dict(zip(frequency_key, more_frequence))
    
    
cumulative = more_frequent(distribution)

import pandas as pd
hamlets = pd.DataFrame(columns=("language","distribution"))
book_dir = "Books"
title_num = 1
for language in book_titles:
    for author in book_titles[language]:
        for title in book_titles[language][author]:
            if title == "Hamlet":
                inputfile = data_filepath+"Books/"+language+"/"+author+"/"+title+".txt"
                text = read_book(inputfile)
                distribution = word_count_distribution(text)
                hamlets.loc[title_num] = language, distribution
                title_num += 1

colors = ["crimson", "forestgreen", "blueviolet"]
handles, hamlet_languages = [], []
for index in range(hamlets.shape[0]):
    language, distribution = hamlets.language[index+1], hamlets.distribution[index+1]
    dist = more_frequent(distribution)
    plot, = plt.loglog(sorted(list(dist.keys())),sorted(list(dist.values()),
        reverse = True), color = colors[index], linewidth = 2)
    handles.append(plot)
    hamlet_languages.append(language)
plt.title("Word Frequencies in Hamlet Translations")
xlim    = [0, 2e3]
xlabel  = "Frequency of Word $W$"
ylabel  = "Fraction of Words\nWith Greater Frequency than $W$"
plt.xlim(xlim); plt.xlabel(xlabel); plt.ylabel(ylabel)
plt.legend(handles, hamlet_languages, loc = "upper right", numpoints = 1)
plt.show()


