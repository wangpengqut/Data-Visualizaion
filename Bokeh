from bokeh.plotting import figure,output_file,show

# prepare some data
x = df.speed
y = df.diameter

# output to static HTML file
output_file("lines.html")

# create a new plot with a title and axis labels
p = figure(title="FiberDiameter line example", x_axis_label='x', y_axis_label='y')

# add a line renderer with legend and line thickness
p.line(x, y, legend="Diameter", line_width=2)

# show the results
show(p)

from bokeh.plotting import figure, output_file, show

# prepare some data
x = [0.1, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]
y0 = [i**2 for i in x]
y1 = [10**i for i in x]
y2 = [10**(i**2) for i in x]

# output to static HTML file
output_file("log_lines.html")

# create a new plot
p = figure(
   tools="pan,box_zoom,reset,save",
   y_axis_type="log", y_range=[0.001, 10**11], title="log axis example",
   x_axis_label='sections', y_axis_label='particles'
)

# add some renderers
p.line(x, x, legend="y=x")
p.circle(x, x, legend="y=x", fill_color="white", size=8)
p.line(x, y0, legend="y=x^2", line_width=3)
p.line(x, y1, legend="y=10^x", line_color="red")
p.circle(x, y1, legend="y=10^x", fill_color="red", line_color="red", size=6)
p.line(x, y2, legend="y=10^x^2", line_color="orange", line_dash="4 4")

# show the results
show(p)


# prepare some data
x = df.speed
y = df.diameter

# output to static HTML file
output_notebook()

# create a new plot
#p = figure(
   #tools="pan,box_zoom,reset,save",
   #y_axis_type="log", y_range=[0.001, 10**11], title="log axis example",
   #x_axis_label='sections', y_axis_label='particles'
#)

p = figure(tools="pan,box_zoom,reset,save",width=1000, height=500, title="FiberDiameter change by speed",
   x_axis_label='Speed', y_axis_label='Diameter')
p.circle(x, y, size=7, color="firebrick", alpha=0.5)
show(p)

grouped = df.groupby("voltage")
diameter = grouped["diameter"]
avg = diameter.mean()
std = diameter.std()
voltage = list(grouped.groups.keys())
Curved = df[df["curved"]==1]
Uncurved = df[df["curved"]==0]

p = figure(title="FiberDiameter by Voltage (Curved and Uncurved)")

p.vbar(x=voltage, bottom=avg-std, top=avg+std, width=0.2, 
       fill_alpha=0.2, line_color=None, legend="Diameter 1 stddev")

p.circle(x=Curved["voltage"], y=Curved["diameter"], size=10, alpha=0.5,
         color="red", legend="Curved")

p.triangle(x=Uncurved["voltage"], y=Uncurved["diameter"], size=10, alpha=0.3,
           color="blue", legend="Uncurved")

p.legend.location = "top_left"
show(p)

grouped = df.groupby("speed")
diameter = grouped["diameter"]
avg = diameter.mean()
std = diameter.std()
speed = list(grouped.groups.keys())
Curved = df[df["curved"]==1]
Uncurved = df[df["curved"]==0]

# output to static HTML file
output_notebook()
output_file("Diameter by Speed.html")

p = figure(title="FiberDiameter by Speed (Curved and Uncurved)")

p.vbar(x=speed, bottom=avg-std, top=avg+std, width=0.8, 
       fill_alpha=0.2, line_color=None, legend="Diameter 1 stddev")

p.circle(x=Curved["speed"], y=Curved["diameter"], size=10, alpha=0.5,
         color="red", legend="Curved")

p.triangle(x=Uncurved["speed"], y=Uncurved["diameter"], size=10, alpha=0.3,
           color="blue", legend="Uncurved")

p.legend.location = "top_left"
show(p)

from bokeh.plotting import figure, output_file, show

# prepare some data
x = df.speed
y = df.diameter
colors = [
    "#%02x%02x%02x" % (int(r), int(g), 100) for r, g in zip(x, y)
]

# output to static HTML file (with CDN resources)
output_file("Diameter color_scatter.html", title="Diameter color_scatter.py example", mode="cdn")

TOOLS="crosshair,pan,wheel_zoom,box_zoom,reset,box_select,lasso_select"

# create a new plot with the tools above, and explicit ranges
p = figure(tools=TOOLS, x_range=(0,1200), y_range=(0,500))

# add a circle renderer with vectorized colors and sizes
p.circle(x,y, radius=df.diameter, fill_color=colors, fill_alpha=0.6, line_color=None)

# show the results
show(p)
